# app.py
import schedule
import time
import asyncio
import threading
import config
import os
from services.export_service import ExportService
from data_sources.google_sheet_source import GoogleSheetSource
from data_processors.text_converter_processor import TextConverterProcessor
from data_destinations.excel_destination import ExcelDestination
from actions.playwright_action import PlaywrightAction
from telegram_bot import setup_bot, send_notification, send_documents
from config_manager import ConfigManager

# --- H√ÄM ASYNC GOM T√ÅC V·ª§ TELEGRAM (ƒê√É C·∫¨P NH·∫¨T) ---
async def post_job_actions_async(summary_message: str, dir_to_scan: str | None, target_user_id: int):
    """
    Th·ª±c hi·ªán t·∫•t c·∫£ h√†nh ƒë·ªông b·∫•t ƒë·ªìng b·ªô sau khi job ch·∫°y xong v√† g·ª≠i t·ªõi ƒë√∫ng ng∆∞·ªùi d√πng.
    """
    # Thay ƒë·ªïi 1: G·ª≠i tin nh·∫Øn t√≥m t·∫Øt t·ªõi ng∆∞·ªùi d√πng m·ª•c ti√™u
    await send_notification(summary_message, user_telegram_id=target_user_id)
    
    # Thay ƒë·ªïi 2: G·ª≠i c√°c t√†i li·ªáu t·ª´ th∆∞ m·ª•c l√†m vi·ªác t·ªõi ng∆∞·ªùi d√πng m·ª•c ti√™u
    if dir_to_scan:
        await send_documents(dir_to_scan, user_telegram_id=target_user_id)


def run_export_job(telegram_id: int):
    """
    H√†m logic ch√≠nh, ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ x·ª≠ l√Ω th√¥ng b√°o c√° nh√¢n v√† th∆∞ m·ª•c l√†m vi·ªác ƒë·ªông.
    """
    print(f"\n================  B·∫Øt ƒë·∫ßu t√°c v·ª• cho User ID: {telegram_id} ================")
    
    config_mgr = ConfigManager()
    
    # 1. L·∫•y th√¥ng tin ƒëƒÉng nh·∫≠p c·ªßa ng∆∞·ªùi d√πng
    user_credentials = config_mgr.get_user_credentials(telegram_id)
    if not user_credentials:
        # Thay ƒë·ªïi 3: G·ª≠i th√¥ng b√°o l·ªói v·ªÅ cho ƒë√∫ng ng∆∞·ªùi d√πng
        asyncio.run(send_notification(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin ƒëƒÉng nh·∫≠p c·ªßa b·∫°n.", user_telegram_id=telegram_id))
        return
    web_username, web_password = user_credentials

    # 2. L·∫•y danh s√°ch c√°c sheet c·ªßa ng∆∞·ªùi d√πng
    user_sheets = config_mgr.get_user_sheets(telegram_id)
    if not user_sheets:
        asyncio.run(send_notification(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t√°c v·ª• n√†o ƒë∆∞·ª£c c·∫•u h√¨nh cho b·∫°n.", user_telegram_id=telegram_id))
        return

    success_count = 0
    fail_count = 0
    total_sheets = len(user_sheets)
    # Thay ƒë·ªïi 4: Ch·ªâ c·∫ßn m·ªôt bi·∫øn ƒë·ªÉ l∆∞u th∆∞ m·ª•c l√†m vi·ªác cu·ªëi c√πng
    last_workspace_dir = None

    # 3. L·∫∑p qua t·ª´ng sheet v√† th·ª±c thi
    for i, sheet_config in enumerate(user_sheets):
        spreadsheet_name = sheet_config.get("spreadsheet_name", "Kh√¥ng t√™n")
        print(f"\n--- X·ª≠ l√Ω sheet {i+1}/{total_sheets}: {spreadsheet_name} ---")
        
        # Thay ƒë·ªïi 5: T·∫°o destination v√† l·∫•y ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c l√†m vi·ªác ngay t·ª´ ƒë·∫ßu
        # ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o d√π th√†nh c√¥ng hay th·∫•t b·∫°i, ta v·∫´n bi·∫øt n∆°i ƒë·ªÉ t√¨m file k·∫øt qu·∫£/l·ªói
        destination = ExcelDestination(
            base_path='workspace',
            telegram_id=telegram_id,
            spreadsheet_name=sheet_config['spreadsheet_name']
        )
        workspace_dir = destination.get_dir() # L·∫•y ƒë∆∞·ªùng d·∫´n workspace, v√≠ d·ª•: 'workspace/123/2025-06-17...'
        last_workspace_dir = workspace_dir # C·∫≠p nh·∫≠t th∆∞ m·ª•c l√†m vi·ªác cu·ªëi c√πng

        try:
            source = GoogleSheetSource(
                service_account_file=config.SERVICE_ACCOUNT_FILE,
                sheet_name=sheet_config['spreadsheet_name'],
                worksheet_name=sheet_config['worksheet_name']
            )
            processor = TextConverterProcessor()
            
            post_action = None
            if config.WEB_AUTOMATION_ENABLED:
                post_action = PlaywrightAction(
                    login_url=config.COMMON_LOGIN_URL,
                    import_url=config.IMPORT_URL,
                    username=web_username,
                    password=web_password,
                    locators=config.LOCATORS
                )
                # Truy·ªÅn ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c l√†m vi·ªác v√†o action ƒë·ªÉ l∆∞u ·∫£nh ch·ª•p m√†n h√¨nh ƒë√∫ng ch·ªó
                post_action.set_screenshot_folder(workspace_dir)

            service = ExportService(source, processor, destination, post_action)
            service.run()
            success_count += 1

        except Exception as e:
            print(f"üí• L·ªñI khi x·ª≠ l√Ω sheet '{spreadsheet_name}': {e}")
            fail_count += 1

    # 4. G·ª≠i b√°o c√°o v√† file k·∫øt qu·∫£
    summary_message = (
        f"HO√ÄN TH√ÄNH T√ÅC V·ª§\n\n"
        f"- ID Ng∆∞·ªùi d√πng: {telegram_id}\n"
        f"- Th√†nh c√¥ng: {success_count}/{total_sheets}\n"
        f"- Th·∫•t b·∫°i: {fail_count}/{total_sheets}"
    )

    # Thay ƒë·ªïi 6: G·ªçi h√†m async wrapper m·ªôt l·∫ßn duy nh·∫•t v·ªõi c√°c tham s·ªë ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    try:    
        asyncio.run(post_job_actions_async(
            summary_message=summary_message,
            dir_to_scan=last_workspace_dir,
            target_user_id=telegram_id
        ))
    except RuntimeError as e:
        print(f"L·ªói khi ch·∫°y post-job actions: {e}. Th·ª≠ t·∫°o event loop m·ªõi.")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(post_job_actions_async(
            summary_message=summary_message,
            dir_to_scan=last_workspace_dir,
            target_user_id=telegram_id
        ))

    print(f"================ K·∫øt th√∫c t√°c v·ª• cho User ID: {telegram_id} ================")

def run_scheduler():
    print("...Scheduler ƒëang ch·∫°y trong n·ªÅn...")
    while True:
        schedule.run_pending()
        time.sleep(1)

def main():
    print("üöÄ Kh·ªüi ch·∫°y ·ª©ng d·ª•ng Bot v√† Scheduler...")
    telegram_app = setup_bot()
    
    scheduler_thread = threading.Thread(target=run_scheduler)
    scheduler_thread.daemon = True
    scheduler_thread.start()

    print("...Bot ƒëang l·∫Øng nghe l·ªánh...")
    telegram_app.run_polling()

if __name__ == "__main__":
    main()
